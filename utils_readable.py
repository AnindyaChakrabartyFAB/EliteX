"""
Utility function to create beautifully formatted readable report
"""
from datetime import datetime
from pathlib import Path
from typing import Dict, Any


def create_readable_report(client_id: str, agent_outputs: Dict, execution_metrics: Dict, output_path: Path):
    """
    Create a beautifully formatted plain text report from all agent outputs.
    Makes it easy to read and understand without JSON complexity.
    """
    
    with open(output_path, "w", encoding="utf-8") as f:
        # Header
        f.write("="*100 + "\n")
        f.write("ELITE CLIENT FINANCIAL ANALYSIS REPORT\n".center(100))
        f.write("="*100 + "\n\n")
        
        f.write(f"Client ID: {client_id}\n")
        f.write(f"Analysis Date: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}\n")
        f.write(f"Total Analysis Time: {execution_metrics['total_time']:.1f} seconds\n")
        f.write(f"Report Generated By: EliteX V6 Multi-Agent System\n")
        f.write("\n" + "="*100 + "\n\n")
        
        # Table of Contents
        f.write("TABLE OF CONTENTS\n")
        f.write("-" * 100 + "\n")
        f.write("1. Manager Agent - Client Profile & Context\n")
        f.write("2. Risk & Compliance Assessment\n")
        f.write("3. Investment Strategy & Recommendations\n")
        f.write("4. Credit & Lending Analysis\n")
        f.write("5. Banking & CASA Strategy\n")
        f.write("6. Bancassurance & Protection Planning\n")
        f.write("7. RM Strategy & Action Plan\n")
        f.write("8. Execution Performance Metrics\n")
        f.write("\n" + "="*100 + "\n\n")
        
        #  SECTION 1: Manager Agent
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 1: MANAGER AGENT - CLIENT PROFILE & CONTEXT\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['manager']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        manager = agent_outputs["manager"]
        
        # Client Basic Info
        f.write("CLIENT BASIC INFORMATION\n")
        f.write("-" * 100 + "\n")
        f.write(f"Client ID: {manager.client_id}\n")
        f.write(f"Name: {manager.client_name}\n")
        f.write(f"Age: {manager.age} years\n")
        f.write(f"Banking Segment: {manager.segment}\n")
        f.write(f"Sub-segment: {manager.subsegment}\n")
        f.write(f"Relationship Tenure: {manager.relationship_tenure_years:.1f} years\n")
        f.write(f"KYC Expiry: {manager.kyc_expiry_date or 'N/A'}\n")
        f.write("\n")
        
        # Risk Profile
        f.write("RISK PROFILE\n")
        f.write("-" * 100 + "\n")
        f.write(f"Risk Appetite: {manager.risk_appetite}\n")
        f.write("\n")
        
        # Financial Metrics
        f.write("FINANCIAL METRICS\n")
        f.write("-" * 100 + "\n")
        f.write(f"Annual Income: AED {manager.annual_income_aed:,.2f}\n")
        f.write(f"Assets Under Management: AED {manager.aum_aed:,.2f}\n")
        f.write(f"CASA Balance: AED {manager.casa_balance_aed:,.2f}\n")
        f.write("\n")
        
        # RM Information
        f.write("RELATIONSHIP MANAGER\n")
        f.write("-" * 100 + "\n")
        f.write(f"RM ID: {manager.rm_id or 'N/A'}\n")
        f.write(f"RM Name: {manager.rm_name or 'N/A'}\n")
        f.write("\n")
        
        # Executive Summary
        f.write("EXECUTIVE SUMMARY\n")
        f.write("-" * 100 + "\n")
        f.write(f"{manager.executive_summary}\n")
        f.write("\n")
        
        # Downstream Summary
        f.write("DOWNSTREAM AGENT SUMMARY\n")
        f.write("-" * 100 + "\n")
        f.write(f"{manager.downstream_summary}\n")
        f.write("\n")
        
        # Immediate Actions
        if manager.immediate_actions:
            f.write("IMMEDIATE ACTION ITEMS\n")
            f.write("-" * 100 + "\n")
            for i, action in enumerate(manager.immediate_actions, 1):
                f.write(f"\n{i}. {action}\n")
            f.write("\n")
        
        # SECTION 2: Risk & Compliance
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 2: RISK & COMPLIANCE ASSESSMENT\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['risk']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        risk = agent_outputs["risk"]
        
        f.write("RISK ASSESSMENT\n")
        f.write("-" * 100 + "\n")
        f.write(f"Risk Appetite: {risk.risk_appetite}\n")
        f.write(f"Risk Level: {risk.risk_level}/6\n")
        f.write(f"Risk Segment: {risk.risk_segment}\n")
        f.write(f"KYC Status: {risk.kyc_status}\n")
        f.write(f"AECB Status: {risk.aecb_status}\n")
        f.write("\n")
        
        f.write("INVESTMENT GUIDELINES\n")
        f.write("-" * 100 + "\n")
        f.write(f"{risk.investment_guidelines}\n\n")
        
        f.write("RISK AGENT RECOMMENDATIONS\n")
        f.write("-" * 100 + "\n")
        f.write(f"{risk.Agent_Recommends}\n\n")
        
        # SECTION 3: Investment Agent
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 3: INVESTMENT STRATEGY & RECOMMENDATIONS\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['investment']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        investment = agent_outputs["investment"]
        
        f.write("INVESTMENT OPPORTUNITY SUMMARY\n")
        f.write("-" * 100 + "\n")
        opp_summary = investment.opportunity_summary
        f.write(f"Has Share of Potential Data: {opp_summary.has_share_of_potential_data}\n")
        f.write(f"Total Opportunity: AED {opp_summary.total_opportunity_aed:,.2f}\n\n")
        
        f.write("RECOMMENDED INVESTMENT PRODUCTS\n")
        f.write("-" * 100 + "\n")
        for i, product in enumerate(investment.product_recommendations, 1):
            f.write(f"\n{i}. {product.product_name} [{product.priority} PRIORITY]\n")
            f.write(f"   {'-' * 96}\n")
            f.write(f"   Category: {product.product_category}\n")
            f.write(f"   Asset Class: {product.asset_class}\n")
            if product.recommended_amount_aed:
                f.write(f"   Recommended Amount: AED {product.recommended_amount_aed:,.2f}\n")
            if product.percentage_of_portfolio:
                f.write(f"   Portfolio Allocation: {product.percentage_of_portfolio:.1f}%\n")
            f.write(f"   Client Fit Score: {product.client_fit_score}/100\n")
            f.write(f"\n   Investment Objective: {product.investment_objective}\n")
            f.write(f"\n   Eligibility: {product.product_eligibility}\n")
            f.write(f"\n   RM Talking Point: {product.rm_talking_point}\n")
            
            if product.annualized_return_3y:
                f.write(f"   3Y Return: {product.annualized_return_3y:.2f}%\n")
            if product.annualized_return_5y:
                f.write(f"   5Y Return: {product.annualized_return_5y:.2f}%\n")
            if product.morningstar_rating:
                f.write(f"   Morningstar Rating: {'‚≠ê' * product.morningstar_rating} ({product.morningstar_rating}/5)\n")
            f.write("\n")
        
        # SECTION 4: Loan Agent
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 4: CREDIT & LENDING ANALYSIS\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['loan']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        loan = agent_outputs["loan"]
        
        f.write("CREDIT CAPACITY ASSESSMENT\n")
        f.write("-" * 100 + "\n")
        credit_cap = loan.credit_capacity
        f.write(f"Annual Income: AED {credit_cap.annual_income_aed:,.2f}\n" if credit_cap.annual_income_aed else "Annual Income: N/A\n")
        f.write(f"Current Obligations: AED {credit_cap.current_obligations_aed:,.2f}\n" if credit_cap.current_obligations_aed else "Current Obligations: N/A\n")
        if credit_cap.debt_to_income_ratio:
            f.write(f"Debt-to-Income Ratio: {credit_cap.debt_to_income_ratio:.1f}%\n")
        if credit_cap.estimated_lending_capacity_aed:
            f.write(f"Estimated Lending Capacity: AED {credit_cap.estimated_lending_capacity_aed:,.2f}\n")
        if credit_cap.capacity_utilization_percentage is not None:
            f.write(f"Capacity Utilization: {credit_cap.capacity_utilization_percentage:.1f}%\n")
        if credit_cap.capacity_assessment:
            f.write(f"Assessment: {credit_cap.capacity_assessment}\n\n")
        
        if loan.existing_facilities:
            f.write("EXISTING CREDIT FACILITIES\n")
            f.write("-" * 100 + "\n")
            for i, facility in enumerate(loan.existing_facilities, 1):
                f.write(f"{i}. {facility.facility_type}\n")
                f.write(f"   Outstanding Balance: AED {facility.outstanding_balance_aed:,.2f}\n")
                if facility.interest_rate:
                    f.write(f"   Interest Rate: {facility.interest_rate:.2f}%\n")
                f.write(f"   Status: {facility.status}\n\n")
        
        f.write("RECOMMENDED LOAN PRODUCTS\n")
        f.write("-" * 100 + "\n")
        for i, product in enumerate(loan.product_recommendations, 1):
            f.write(f"\n{i}. {product.product_name} [{product.priority} PRIORITY]\n")
            f.write(f"   {'-' * 96}\n")
            f.write(f"   Loan Type: {product.loan_type}\n")
            f.write(f"   Interest Rate Range: {product.interest_rate_range}\n")
            f.write(f"   Interest Structure: {product.interest_structure}\n")
            f.write(f"   Collateral Required: {'Yes' if product.collateral_required else 'No'}\n")
            if product.recommended_amount_aed:
                f.write(f"   Recommended Amount: AED {product.recommended_amount_aed:,.2f}\n")
            f.write(f"   Eligibility Score: {product.eligibility_score if product.eligibility_score else 'N/A'}/100\n")
            f.write(f"   Client Fit Score: {product.client_fit_score}/100\n")
            f.write(f"\n   Product Description: {product.product_description}\n")
            f.write(f"\n   Eligibility: {product.product_eligibility}\n")
            f.write(f"\n   RM Talking Point: {product.rm_talking_point}\n\n")
        
        # SECTION 5: Banking Agent
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 5: BANKING & CASA STRATEGY\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['banking']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        banking = agent_outputs["banking"]
        
        f.write("CASA ACCOUNTS\n")
        f.write("-" * 100 + "\n")
        f.write(f"Total CASA Balance: AED {banking.total_casa_balance_aed:,.2f}\n" if banking.total_casa_balance_aed else "Total CASA Balance: N/A\n")
        f.write(f"Investible Cash: AED {banking.investible_cash_aed:,.2f}\n" if banking.investible_cash_aed else "Investible Cash: N/A\n")
        f.write(f"Liquidity Position: {banking.liquidity_position}\n\n")
        
        for i, account in enumerate(banking.casa_accounts, 1):
            f.write(f"{i}. {account.account_type} Account\n")
            f.write(f"   Balance: AED {account.balance_aed:,.2f}\n")
            if account.interest_rate:
                f.write(f"   Interest Rate: {account.interest_rate:.2f}%\n")
            f.write("\n")
        
        f.write("RECOMMENDED BANKING PRODUCTS\n")
        f.write("-" * 100 + "\n")
        for i, product in enumerate(banking.product_recommendations, 1):
            f.write(f"\n{i}. {product.product_name} [{product.priority} PRIORITY]\n")
            f.write(f"   {'-' * 96}\n")
            f.write(f"   Product Type: {product.banking_product_type}\n")
            if product.interest_rate:
                f.write(f"   Interest Rate: {product.interest_rate:.2f}%\n")
            if product.minimum_balance_aed:
                f.write(f"   Minimum Balance: AED {product.minimum_balance_aed:,.2f}\n")
            if product.recommended_amount_aed:
                f.write(f"   Recommended Amount: AED {product.recommended_amount_aed:,.2f}\n")
            f.write(f"\n   Key Features:\n")
            for feature in product.key_features:
                f.write(f"      ‚Ä¢ {feature}\n")
            f.write(f"\n   Liquidity Impact: {product.liquidity_impact}\n")
            f.write(f"\n   Optimization Benefit: {product.optimization_benefit}\n")
            f.write(f"\n   RM Talking Point: {product.rm_talking_point}\n\n")
        
        # SECTION 6: Bancassurance
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 6: BANCASSURANCE & PROTECTION PLANNING\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['bancassurance']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        bancassurance = agent_outputs["bancassurance"]
        
        f.write("CURRENT BANCASSURANCE PORTFOLIO\n")
        f.write("-" * 100 + "\n")
        f.write(f"Total Policies: {bancassurance.total_policies_count}\n")
        f.write(f"Total Policy Value: AED {bancassurance.total_policy_value_aed:,.2f}\n" if bancassurance.total_policy_value_aed else "Total Policy Value: N/A\n")
        f.write(f"Portfolio Adequacy: {bancassurance.portfolio_adequacy}\n\n")
        
        if bancassurance.insurance_needs:
            f.write("IDENTIFIED INSURANCE NEEDS (ML-Driven)\n")
            f.write("-" * 100 + "\n")
            for i, need in enumerate(bancassurance.insurance_needs, 1):
                if need.need_value == 1:
                    f.write(f"{i}. {need.need_name} - ACTIVE\n")
                    f.write(f"   Recommended Products: {', '.join(need.recommended_products)}\n\n")
        
        if bancassurance.lifecycle_triggers:
            f.write("LIFECYCLE TRIGGERS\n")
            f.write("-" * 100 + "\n")
            for i, trigger in enumerate(bancassurance.lifecycle_triggers, 1):
                f.write(f"{i}. [{trigger.priority}] {trigger.trigger_type}\n")
                f.write(f"   Description: {trigger.description}\n")
                if trigger.days_to_event:
                    f.write(f"   Days to Event: {trigger.days_to_event}\n")
                f.write(f"   Talking Point: {trigger.talking_point}\n\n")
        
        f.write("RECOMMENDED BANCASSURANCE PRODUCTS\n")
        f.write("-" * 100 + "\n")
        for i, product in enumerate(bancassurance.product_recommendations, 1):
            f.write(f"\n{i}. {product.product_name} [{product.priority} PRIORITY]\n")
            f.write(f"   {'-' * 96}\n")
            f.write(f"   Insurance Type: {product.insurance_type}\n")
            if product.recommended_amount_aed:
                f.write(f"   Recommended Coverage: AED {product.recommended_amount_aed:,.2f}\n")
            f.write(f"   Client Fit Score: {product.client_fit_score if hasattr(product, 'client_fit_score') else 'N/A'}\n")
            f.write(f"\n   Eligibility: {product.product_eligibility}\n")
            f.write(f"\n   RM Talking Point: {product.rm_talking_point}\n\n")
        
        # SECTION 7: RM Strategy
        f.write("\n" + "#"*100 + "\n")
        f.write(f"# SECTION 7: RM STRATEGY & ACTION PLAN (FINAL SYNTHESIS)\n")
        f.write(f"# Execution Time: {execution_metrics['agent_timings']['rm_strategy']:.1f}s\n")
        f.write("#"*100 + "\n\n")
        
        rm_strategy = agent_outputs["rm_strategy"]
        
        f.write("EXECUTIVE SUMMARY\n")
        f.write("-" * 100 + "\n")
        f.write(f"{rm_strategy.executive_summary}\n\n")
        
        f.write("CLIENT OVERVIEW\n")
        f.write("-" * 100 + "\n")
        f.write(f"Client: {rm_strategy.client_name or client_id}\n")
        f.write(f"Segment: {rm_strategy.client_segment}\n")
        f.write(f"Risk Profile: {rm_strategy.risk_profile}\n")
        f.write(f"Current AUM: AED {rm_strategy.current_aum_aed:,.2f}\n" if rm_strategy.current_aum_aed else "Current AUM: N/A\n")
        f.write(f"Relationship Tenure: {rm_strategy.relationship_tenure:.1f} years\n\n" if rm_strategy.relationship_tenure else "Relationship Tenure: N/A\n\n")
        
        f.write("PRIORITY ACTION ITEMS (NEXT 7 DAYS)\n")
        f.write("-" * 100 + "\n")
        for action in rm_strategy.priority_actions:
            f.write(f"\n{action.action_number}. [{action.priority}] {action.action_description}\n")
            f.write(f"   Rationale: {action.rationale}\n")
            f.write(f"   Expected Outcome: {action.expected_outcome}\n")
            f.write(f"   Execution Steps:\n")
            for step in action.execution_steps:
                f.write(f"      ‚Ä¢ {step}\n")
        f.write("\n")
        
        f.write("DATA-DRIVEN TALKING POINTS\n")
        f.write("-" * 100 + "\n")
        for tp in rm_strategy.talking_points[:10]:  # Top 10
            f.write(f"\n{tp.talking_point_number}. {tp.talking_point_text}\n")
            f.write(f"   Supporting Data: {tp.supporting_data}\n")
            f.write(f"   When to Use: {tp.when_to_use}\n")
        f.write("\n")
        
        f.write("CLIENT ENGAGEMENT QUESTIONS\n")
        f.write("-" * 100 + "\n")
        for q in rm_strategy.engagement_questions[:10]:  # Top 10
            f.write(f"\n{q.question_number}. {q.question_text}\n")
            f.write(f"   Context: {q.context}\n")
            f.write(f"   Purpose: {q.purpose}\n")
            f.write(f"   Follow-up Action: {q.follow_up_action}\n")
        f.write("\n")
        
        f.write("PRODUCT RECOMMENDATION STRATEGY\n")
        f.write("-" * 100 + "\n")
        for strategy in rm_strategy.product_strategies:
            f.write(f"\n{strategy.product_category}:\n")
            f.write(f"   Recommended Products: {', '.join(strategy.recommended_products)}\n")
            f.write(f"   Client Fit Rationale: {strategy.client_fit_rationale}\n")
            f.write(f"   Conversation Approach: {strategy.conversation_approach}\n")
            if strategy.expected_investment_amount:
                f.write(f"   Expected Amount: {strategy.expected_investment_amount}\n")
        f.write("\n")
        
        # SECTION 8: Performance Metrics
        f.write("\n" + "#"*100 + "\n")
        f.write("# SECTION 8: EXECUTION PERFORMANCE METRICS\n")
        f.write("#"*100 + "\n\n")
        
        f.write("AGENT EXECUTION TIMES\n")
        f.write("-" * 100 + "\n")
        f.write(f"1. Manager Agent: {execution_metrics['agent_timings']['manager']:.2f}s\n")
        f.write(f"2. Risk & Compliance Agent: {execution_metrics['agent_timings']['risk']:.2f}s\n")
        f.write(f"3. Investment Agent: {execution_metrics['agent_timings']['investment']:.2f}s\n")
        f.write(f"4. Loan Agent: {execution_metrics['agent_timings']['loan']:.2f}s\n")
        f.write(f"5. Banking Agent: {execution_metrics['agent_timings']['banking']:.2f}s\n")
        f.write(f"6. Bancassurance Agent: {execution_metrics['agent_timings']['bancassurance']:.2f}s\n")
        f.write(f"7. RM Strategy Agent: {execution_metrics['agent_timings']['rm_strategy']:.2f}s\n")
        f.write(f"\nTotal Execution Time: {execution_metrics['total_time']:.2f} seconds ({execution_metrics['total_time']/60:.1f} minutes)\n")
        
        # Footer
        f.write("\n" + "="*100 + "\n")
        f.write(f"Report Generated: {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}\n")
        f.write(f"Analysis Framework: EliteX V6 Multi-Agent System\n")
        f.write(f"Individual agent outputs available as JSON files for detailed analysis\n")
        f.write("="*100 + "\n")
    
    print(f"‚úÖ Readable report created: {output_path}")

